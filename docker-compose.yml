# Docker Compose for Vehiculos Application
services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: vehiculos-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: vehicles_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432" # Expose PostgreSQL on port 5433 to avoid conflicts
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./db/sample_data.sql:/docker-entrypoint-initdb.d/02-sample_data.sql
    networks:
      - vehiculos-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d vehicles_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Node.js Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: vehiculos-backend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      APP_PORT: 3000
      APP_HOST: 0.0.0.0
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: vehicles_db
      NODE_ENV: development
      RATE_LIMIT_WINDOW_MS: 60000 # 1 minute
      RATE_LIMIT_MAX: 1000 # 1000 requests per window
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - vehiculos-network
    volumes:
      - ./logs:/app/logs # Optional: for logs if you add logging

# Named volumes
volumes:
  postgres_data:
    driver: local

# Networks
networks:
  vehiculos-network:
    driver: bridge
