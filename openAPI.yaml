openapi: 3.0.3
info:
  title: Vehicle Management API
  version: 2.0.0
  description: |
    Secure and scalable API for managing users, vehicles, assignments, and maintenance operations.

    ## Features
    - RESTful endpoints with consistent plural naming
    - Comprehensive error handling
    - Input validation and sanitization
    - Pagination support
    - Security headers and rate limiting

    ## Authentication
    This API is protected with Bearer JWT tokens issued by Microsoft Entra ID (Azure AD).
    Send requests with an Authorization header: `Authorization: Bearer <access_token>`.

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://app-vehiculos-api-prod.azurewebsites.net
    description: Production server
  - url: https://app-vehiculos-api-test.azurewebsites.net
    description: Test server

paths:
  # HEALTH CHECK
  /health:
    get:
      summary: Health check endpoint
      tags: [System]
      security: [] # Public endpoint; no auth required
      responses:
        "200":
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "API is healthy"
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: number

  /me:
    get:
      summary: Get current authenticated user
      description: Returns the local user mapped to the bearer token.
      tags: [Users]
      responses:
        "200":
          description: Current user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"

  # USERS
  /users:
    get:
      summary: Get all users with pagination and search
      description: |
        Get users with optional search filters and pagination.

        **Search Parameters:**
        - `email`: Exact match by email address
        - `cuit`: Exact match by CUIT (11 digits)
        - `firstName`: Partial match by first name (case-insensitive)
        - `lastName`: Partial match by last name (case-insensitive)
        - `active`: Filter by active status (true/false)

        **Examples:**
        - `/users?email=user@example.com`
        - `/users?cuit=20345678901`
        - `/users?firstName=John&lastName=Doe`
        - `/users?active=false`
        - `/users?firstName=Ana&page=1&limit=5`
      tags: [Users]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: email
          in: query
          description: Filter by exact email address
          schema:
            type: string
            format: email
        - name: cuit
          in: query
          description: Filter by exact CUIT (11 digits)
          schema:
            type: string
            pattern: "^[0-9]{11}$"
            example: "20345678901"
        - name: firstName
          in: query
          description: Filter by first name (partial match, case-insensitive)
          schema:
            type: string
        - name: lastName
          in: query
          description: Filter by last name (partial match, case-insensitive)
          schema:
            type: string
        - name: active
          in: query
          description: Filter by active status (true for active users, false for inactive users)
          schema:
            type: boolean
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListResponse"
    post:
      summary: Create a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"

  /users/{id}:
    get:
      summary: Get user by ID
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Update user (full replacement)
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateInput"
      responses:
        "200":
          description: User updated successfully
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Partially update user
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateInput"
      responses:
        "200":
          description: User partially updated successfully
        "400":
          $ref: "#/components/responses/ValidationError"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete user
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: User deleted successfully
        "404":
          description: User not found

  /users/{id}/activate:
    post:
      summary: Activate user
      description: Activate a deactivated user
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User activated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          description: User not found
        "409":
          description: User is already active
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"

  /users/{id}/deactivate:
    post:
      summary: Deactivate user
      description: Deactivate an active user (soft delete)
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User deactivated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          description: User not found
        "409":
          description: User is already inactive
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"

  # VEHICLES
  /vehicles:
    get:
      summary: Get all vehicles with pagination and search
      description: |
        Get vehicles with optional search filters and pagination.

        **Search Parameters:**
        - `licensePlate`: Exact match by license plate
        - `brand`: Partial match by brand name (case-insensitive)
        - `model`: Partial match by model name (case-insensitive)
        - `year`: Exact match by year

        **Examples:**
        - `/vehicles?licensePlate=AAA-123`
        - `/vehicles?brand=Toyota&model=Corolla`
        - `/vehicles?year=2020&page=1&limit=5`
        - `/vehicles?brand=Honda&year=2021`
      tags: [Vehicles]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: licensePlate
          in: query
          description: Filter by exact license plate
          schema:
            type: string
            pattern: '^[A-Z]{2,3}-?\d{3,4}[A-Z]{0,2}$'
            example: "AAA-123"
        - name: brand
          in: query
          description: Filter by brand name (partial match, case-insensitive)
          schema:
            type: string
            example: "Toyota"
        - name: model
          in: query
          description: Filter by model name (partial match, case-insensitive)
          schema:
            type: string
            example: "Corolla"
        - name: year
          in: query
          description: Filter by exact year
          schema:
            type: integer
            minimum: 1900
            maximum: 2030
            example: 2020
      responses:
        "200":
          description: List of vehicles
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VehicleListResponse"
    post:
      summary: Create a new vehicle
      tags: [Vehicles]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VehicleInput"
      responses:
        "201":
          description: Vehicle created successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"

  /vehicles/{id}:
    get:
      summary: Get vehicle by ID
      tags: [Vehicles]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Vehicle found
        "404":
          description: Vehicle not found
    put:
      summary: Update vehicle (full replacement)
      tags: [Vehicles]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VehicleInput"
      responses:
        "200":
          description: Vehicle updated successfully
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Partially update vehicle
      tags: [Vehicles]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VehicleInput"
      responses:
        "200":
          description: Vehicle partially updated successfully
        "400":
          $ref: "#/components/responses/ValidationError"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete vehicle
      tags: [Vehicles]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Vehicle deleted successfully
        "404":
          description: Vehicle not found

  /vehicles/{id}/kilometers:
    get:
      summary: Get all kilometer logs for a vehicle
      description: |
        Returns the chronological list of kilometer readings for a given vehicle.
        Useful for tracking usage and validating new entries.
      tags: [Vehicles]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of kilometer logs for the vehicle
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VehicleKilometersLogListResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Add a new kilometer log for a vehicle
      description: |
        Adds a new kilometer reading for a vehicle. The kilometers value must be greater than or equal to the previous reading and less than or equal to the next reading (if inserting out-of-order).
        Returns error 422 if the value is out of range.
      tags: [Vehicles]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VehicleKilometersLogCreateInput"
            examples:
              valid:
                summary: Valid log
                value:
                  userId: "550e8400-e29b-41d4-a716-446655440000"
                  date: "2025-02-05T09:00:00Z"
                  kilometers: 48500
              invalid:
                summary: Invalid log (km less than previous)
                value:
                  userId: "550e8400-e29b-41d4-a716-446655440000"
                  date: "2025-02-05T09:00:00Z"
                  kilometers: 40000
      responses:
        "201":
          description: Kilometer log created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VehicleKilometersLogResponse"
        "422":
          description: Invalid kilometers value (out of range)
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # RESERVATIONS
  /reservations:
    get:
      summary: Get all reservations with optional filters
      description: |
        Get all reservations with optional filtering by user or vehicle.

        **Filter Parameters:**
        - `userId`: Filter reservations by specific user ID
        - `vehicleId`: Filter reservations by specific vehicle ID
        - Pagination is supported with `page` and `limit` parameters

        **Examples:**
        - `/reservations?userId=550e8400-e29b-41d4-a716-446655440000`
        - `/reservations?vehicleId=650e8400-e29b-41d4-a716-446655440001`
        - `/reservations?page=1&limit=5`
      tags: [Reservations]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
          description: "Filter reservations by user ID"
        - name: vehicleId
          in: query
          schema:
            type: string
            format: uuid
          description: "Filter reservations by vehicle ID"
      responses:
        "200":
          description: List of reservations retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReservationListResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create a new reservation
      tags: [Reservations]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReservationInput"
      responses:
        "201":
          description: Reservation created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReservationResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # ASSIGNMENTS
  /assignments:
    get:
      summary: Get all vehicle assignments with optional filters
      description: |
        Get all vehicle assignments with optional filtering by user or vehicle.

        **Filter Parameters:**
        - `userId`: Filter assignments by specific user ID
        - `vehicleId`: Filter assignments by specific vehicle ID
        - Pagination is supported with `page` and `limit` parameters

        **Examples:**
        - `/assignments?userId=550e8400-e29b-41d4-a716-446655440000`
        - `/assignments?vehicleId=650e8400-e29b-41d4-a716-446655440001`
        - `/assignments?page=1&limit=5`
      tags: [Assignments]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
          description: "Filter assignments by user ID"
        - name: vehicleId
          in: query
          schema:
            type: string
            format: uuid
          description: "Filter assignments by vehicle ID"
      responses:
        "200":
          description: List of assignments retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssignmentListResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create a new vehicle assignment
      tags: [Assignments]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignmentInput"
      responses:
        "201":
          description: Assignment created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssignmentResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # MAINTENANCE CATEGORIES
  /maintenance/categories:
    get:
      summary: Get all maintenance categories
      tags: [Maintenance]
      responses:
        "200":
          description: List of maintenance categories retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceCategoryListResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create a new maintenance category
      tags: [Maintenance]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MaintenanceCategoryInput"
      responses:
        "201":
          description: Maintenance category created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceCategoryResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /maintenance/categories/{id}:
    get:
      summary: Get maintenance category by ID
      tags: [Maintenance]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Maintenance category retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceCategoryResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: Update maintenance category (full replacement)
      tags: [Maintenance]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MaintenanceCategoryInput"
      responses:
        "200":
          description: Maintenance category updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceCategoryResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      summary: Update maintenance category (partial update)
      tags: [Maintenance]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MaintenanceCategoryInput"
      responses:
        "200":
          description: Maintenance category updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceCategoryResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete maintenance category
      tags: [Maintenance]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Maintenance category deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # MAINTENANCE POSIBLES
  /maintenance/posibles:
    get:
      summary: Get all possible maintenance types
      tags: [Maintenance]
      responses:
        "200":
          description: List of possible maintenance types retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceListResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create a new maintenance type
      tags: [Maintenance]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MaintenanceInput"
      responses:
        "201":
          description: Maintenance type created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /maintenance/posibles/{id}:
    get:
      summary: Get maintenance type by ID
      tags: [Maintenance]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Maintenance type retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: Update maintenance type (full replacement)
      tags: [Maintenance]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MaintenanceInput"
      responses:
        "200":
          description: Maintenance type updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      summary: Update maintenance type (partial update)
      tags: [Maintenance]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MaintenanceInput"
      responses:
        "200":
          description: Maintenance type updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete maintenance type
      tags: [Maintenance]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Maintenance type deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /maintenance/posibles/{maintenanceId}/vehicles:
    get:
      summary: Get all vehicles assigned to a specific maintenance type
      description: |
        Retrieve all vehicles that have been assigned to a specific maintenance type.

        This endpoint returns detailed information about each vehicle including:
        - Vehicle details (license plate, brand, model, year, image)
        - Assignment details (frequencies for kilometers and days)
        - Assignment ID for reference

        **Use Cases:**
        - View which vehicles need a specific type of maintenance
        - Monitor maintenance coverage across the fleet
        - Generate maintenance schedules by maintenance type

        **Example Response:**
        Returns an array of vehicle assignments with their details and frequencies.
      tags: [Maintenance]
      parameters:
        - name: maintenanceId
          in: path
          required: true
          description: UUID of the maintenance type to get vehicles for
          schema:
            type: string
            format: uuid
          example: "a06b00cc-13bf-4286-a517-59b8f3fadae2"
      responses:
        "200":
          description: Vehicles assigned to maintenance type retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceVehiclesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          description: Maintenance type not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                status: "error"
                message: "Maintenance with ID a06b00cc-13bf-4286-a517-59b8f3fadae2 not found"
                statusCode: 404
                type: "https://example.com/problems/maintenance-not-found"
                title: "Maintenance Not Found"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # MAINTENANCE ASSIGNMENTS
  /maintenance/assignments:
    post:
      summary: Assign maintenance to a vehicle
      tags: [Maintenance]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignedMaintenanceInput"
      responses:
        "201":
          description: Maintenance assigned successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssignedMaintenanceResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /maintenance/assignments/{vehicleId}:
    get:
      summary: Get all maintenance assignments for a specific vehicle
      tags: [Maintenance]
      parameters:
        - name: vehicleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Vehicle maintenance assignments retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssignedMaintenanceListResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /maintenance/assignments/{id}:
    put:
      summary: Update maintenance assignment
      description: Update frequency settings for an existing maintenance assignment
      tags: [Maintenance]
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the maintenance assignment to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMaintenanceAssignmentInput"
      responses:
        "200":
          description: Maintenance assignment updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceAssignmentResponse"
              example:
                status: "success"
                message: "Maintenance assignment updated successfully"
                data:
                  id: "550e8400-e29b-41d4-a716-446655440000"
                  vehicleId: "550e8400-e29b-41d4-a716-446655440001"
                  maintenanceId: "550e8400-e29b-41d4-a716-446655440002"
                  kilometersFrequency: 10000
                  daysFrequency: 90
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          description: Maintenance assignment not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                status: "error"
                message: "Maintenance assignment not found"
                statusCode: 404
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: Delete maintenance assignment
      description: Remove a maintenance assignment from a vehicle
      tags: [Maintenance]
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the maintenance assignment to delete
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Maintenance assignment deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: "success"
                message: "Maintenance assignment deleted successfully"
                data: null
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          description: Maintenance assignment not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                status: "error"
                message: "Maintenance assignment not found"
                statusCode: 404
        "500":
          $ref: "#/components/responses/InternalServerError"

  # MAINTENANCE RECORDS
  /maintenance/records:
    get:
      summary: Get all maintenance records with optional filters
      description: |
        Get all maintenance records with optional filtering by user or vehicle.

        **Filter Parameters:**
        - `userId`: Filter maintenance records by specific user ID
        - `vehicleId`: Filter maintenance records by specific vehicle ID
        - Pagination is supported with `page` and `limit` parameters

        **Examples:**
        - `/maintenance/records?userId=550e8400-e29b-41d4-a716-446655440000`
        - `/maintenance/records?vehicleId=650e8400-e29b-41d4-a716-446655440001`
        - `/maintenance/records?page=1&limit=5`
      tags: [Maintenance]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
          description: "Filter maintenance records by user ID"
        - name: vehicleId
          in: query
          schema:
            type: string
            format: uuid
          description: "Filter maintenance records by vehicle ID"
      responses:
        "200":
          description: List of maintenance records retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceRecordListResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Add a new maintenance record
      tags: [Maintenance]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MaintenanceRecordInput"
      responses:
        "201":
          description: Maintenance record created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceRecordResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /maintenance/records/vehicle/{vehicleId}:
    get:
      summary: Get maintenance records for a specific vehicle
      tags: [Maintenance]
      parameters:
        - name: vehicleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Vehicle maintenance records retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceRecordListResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /maintenance/records/{id}:
    get:
      summary: Get maintenance record by ID
      tags: [Maintenance]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Maintenance record retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceRecordResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # VEHICLE RESPONSIBLES
  /vehicle-responsibles:
    get:
      summary: Get all vehicle responsibles with optional filters
      description: |
        Get all vehicle responsibility assignments with optional filtering by user, vehicle, or active status.

        **Filter Parameters:**
        - `userId`: Filter by specific user ID
        - `vehicleId`: Filter by specific vehicle ID
        - `active`: Filter by active status (true for current, false for ended)
        - `date`: Filter by specific date (YYYY-MM-DD format)
        - Pagination is supported with `page` and `limit` parameters

        **Examples:**
        - `/vehicle-responsibles?userId=550e8400-e29b-41d4-a716-446655440000`
        - `/vehicle-responsibles?vehicleId=650e8400-e29b-41d4-a716-446655440001`
        - `/vehicle-responsibles?active=true`
        - `/vehicle-responsibles?date=2025-01-15`
      tags: [Vehicle Responsibles]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
          description: "Filter by user ID"
        - name: vehicleId
          in: query
          schema:
            type: string
            format: uuid
          description: "Filter by vehicle ID"
        - name: active
          in: query
          schema:
            type: boolean
          description: Filter by active status (true for current, false for ended)
        - name: date
          in: query
          schema:
            type: string
            format: date
          description: Filter by specific date (YYYY-MM-DD format)
      responses:
        "200":
          description: List of vehicle responsibles retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VehicleResponsibleListResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create a new vehicle responsible assignment
      description: |
        Create a new vehicle responsible assignment. This will automatically end any current 
        active responsibility for the same vehicle by setting the end date to the day before 
        the new assignment starts.
      tags: [Vehicle Responsibles]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VehicleResponsibleInput"
      responses:
        "201":
          description: Vehicle responsible created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VehicleResponsibleResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          description: Conflicting responsibility periods
        "500":
          $ref: "#/components/responses/InternalServerError"

  /vehicle-responsibles/{id}:
    get:
      summary: Get vehicle responsible by ID
      tags: [Vehicle Responsibles]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Vehicle responsible found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VehicleResponsibleResponse"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Update vehicle responsible (full replacement)
      tags: [Vehicle Responsibles]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VehicleResponsibleInput"
      responses:
        "200":
          description: Vehicle responsible updated successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          description: Conflicting responsibility periods
    patch:
      summary: Partially update vehicle responsible
      tags: [Vehicle Responsibles]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VehicleResponsibleInput"
      responses:
        "200":
          description: Vehicle responsible partially updated successfully
        "400":
          $ref: "#/components/responses/ValidationError"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          description: Conflicting responsibility periods
    delete:
      summary: Delete vehicle responsible
      tags: [Vehicle Responsibles]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Vehicle responsible deleted successfully
        "404":
          description: Vehicle responsible not found

  /vehicle-responsibles/vehicle/{vehicleId}/current:
    get:
      summary: Get current responsible for a vehicle
      description: Get the currently active responsible for a specific vehicle
      tags: [Vehicle Responsibles]
      parameters:
        - name: vehicleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Current responsible found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VehicleResponsibleResponse"
        "404":
          description: No current responsible found for this vehicle

  /vehicle-responsibles/user/{userId}/current:
    get:
      summary: Get current vehicles under a user's responsibility
      description: Get all vehicles currently under the responsibility of a specific user
      tags: [Vehicle Responsibles]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Current vehicles found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/VehicleResponsibleWithDetails"

components:
  schemas:
    VehicleKilometersLog:
      type: object
      properties:
        id:
          type: string
          format: uuid
        vehicleId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        date:
          type: string
          format: date-time
        kilometers:
          type: integer
          minimum: 0
        createdAt:
          type: string
          format: date-time
      required:
        - vehicleId
        - userId
        - date
        - kilometers

    VehicleKilometersLogCreateInput:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        date:
          type: string
          format: date-time
        kilometers:
          type: integer
          minimum: 0
      required:
        - userId
        - date
        - kilometers

    VehicleKilometersLogResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/VehicleKilometersLog"

    VehicleKilometersLogListResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/VehicleKilometersLog"
    # RFC 7807 Problem Details for HTTP APIs
    ProblemDetails:
      type: object
      description: RFC 7807 Problem Details for HTTP APIs
      properties:
        type:
          type: string
          format: uri
          description: A URI reference that identifies the problem type
          example: "https://example.com/problems/validation-error"
        title:
          type: string
          description: A short, human-readable summary of the problem type
          example: "Validation Failed"
        status:
          type: integer
          description: The HTTP status code
          example: 400
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence
          example: "The request contains invalid data"
        instance:
          type: string
          format: uri
          description: A URI reference that identifies the specific occurrence
          example: "/users/123"
      required:
        - type
        - title
        - status

    ValidationProblemDetails:
      allOf:
        - $ref: "#/components/schemas/ProblemDetails"
        - type: object
          properties:
            errors:
              type: array
              description: List of validation errors
              items:
                type: object
                properties:
                  field:
                    type: string
                    description: The field that failed validation
                    example: "email"
                  message:
                    type: string
                    description: The validation error message
                    example: "Invalid email format"
                  code:
                    type: string
                    description: The validation error code
                    example: "invalid_string"

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        firstName:
          type: string
          example: "Juan"
        lastName:
          type: string
          example: "Pérez"
        cuit:
          type: string
          example: "20345678901"
          description: "CUIT (11 digits)"
        email:
          type: string
          format: email
          example: "juan.perez@example.com"
        entraId:
          type: string
          example: ""
          description: "Microsoft Entra ID unique identifier. Empty string means not yet linked."
        active:
          type: boolean
          example: true
          description: "Whether the user is active or deactivated"
      required:
        - id
        - firstName
        - lastName
        - cuit
        - email
        - entraId
        - active

    UserInput:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
        lastName:
          type: string
          minLength: 1
          maxLength: 50
        cuit:
          type: string
          pattern: "^[0-9]{11}$"
          example: "20345678901"
          description: "CUIT (11 digits)"
        email:
          type: string
          format: email
        active:
          type: boolean
          default: true
          description: "Whether the user is active or deactivated"
      required:
        - firstName
        - lastName
        - cuit
        - email

    UserUpdateInput:
      allOf:
        - $ref: "#/components/schemas/UserInput"

    Vehicle:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "650e8400-e29b-41d4-a716-446655440001"
        licensePlate:
          type: string
          pattern: "^[A-Z]{3}[0-9]{3}$"
          example: "ABC123"
        brand:
          type: string
          example: "Toyota"
        model:
          type: string
          example: "Corolla"
        year:
          type: integer
          minimum: 1900
          maximum: 2030
          example: 2022
        currentResponsible:
          allOf:
            - $ref: "#/components/schemas/VehicleResponsibleWithDetails"
            - nullable: true
          description: "Current responsible for the vehicle (only included in detailed views)"
      required:
        - id
        - licensePlate
        - brand
        - model
        - year

    VehicleInput:
      type: object
      properties:
        licensePlate:
          type: string
          pattern: "^[A-Z]{3}[0-9]{3}$"
        brand:
          type: string
          minLength: 1
          maxLength: 50
        model:
          type: string
          minLength: 1
          maxLength: 50
        year:
          type: integer
          minimum: 1900
          maximum: 2030
      required:
        - licensePlate
        - brand
        - model
        - year

    # VEHICLE RESPONSIBLE SCHEMAS
    VehicleResponsible:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "d50e8400-e29b-41d4-a716-446655440008"
        vehicleId:
          type: string
          format: uuid
          example: "650e8400-e29b-41d4-a716-446655440001"
        userId:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        startDate:
          type: string
          format: date
          example: "2025-01-15"
          description: "Start date of the responsibility period"
        endDate:
          type: string
          format: date
          nullable: true
          example: "2025-12-31"
          description: "End date of the responsibility period (null means currently active)"
        createdAt:
          type: string
          format: date-time
          example: "2025-01-15T09:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-01-15T09:00:00Z"
      required:
        - id
        - vehicleId
        - userId
        - startDate

    VehicleResponsibleWithDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "d50e8400-e29b-41d4-a716-446655440008"
        startDate:
          type: string
          format: date
          example: "2025-01-15"
          description: "Start date of the responsibility period"
        endDate:
          type: string
          format: date
          nullable: true
          example: "2025-12-31"
          description: "End date of the responsibility period (null means currently active)"
        user:
          $ref: "#/components/schemas/User"
        vehicle:
          $ref: "#/components/schemas/Vehicle"
      required:
        - id
        - startDate
        - user
        - vehicle

    VehicleResponsibleInput:
      type: object
      properties:
        vehicleId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        startDate:
          type: string
          format: date
          description: "Start date of the responsibility period (defaults to today if not provided)"
        endDate:
          type: string
          format: date
          nullable: true
          description: "End date of the responsibility period (null means indefinite)"
      required:
        - vehicleId
        - userId

    VehicleResponsibleResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/VehicleResponsibleWithDetails"

    VehicleResponsibleListResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/VehicleResponsibleWithDetails"

    # Response schemas
    ApiResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success, error]
        message:
          type: string
        data:
          type: object
        pagination:
          $ref: "#/components/schemas/Pagination"

    Pagination:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
        limit:
          type: integer
          minimum: 1
        total:
          type: integer
          minimum: 0
        pages:
          type: integer
          minimum: 0

    UserResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/User"

    UserListResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/User"

    VehicleResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/Vehicle"

    VehicleListResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Vehicle"

    ErrorResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            status:
              type: string
              enum: [error]
            errors:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                  message:
                    type: string

    # RESERVATION SCHEMAS
    Reservation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "750e8400-e29b-41d4-a716-446655440002"
        startDate:
          type: string
          format: date-time
          example: "2025-01-15T09:00:00Z"
        endDate:
          type: string
          format: date-time
          example: "2025-01-15T17:00:00Z"
        user:
          $ref: "#/components/schemas/User"
        vehicle:
          $ref: "#/components/schemas/Vehicle"
      required:
        - id
        - startDate
        - endDate
        - user
        - vehicle

    ReservationInput:
      type: object
      properties:
        vehicleId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
      required:
        - vehicleId
        - userId
        - startDate
        - endDate

    ReservationResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/Reservation"

    ReservationListResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Reservation"

    # ASSIGNMENT SCHEMAS
    Assignment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "850e8400-e29b-41d4-a716-446655440003"
        startDate:
          type: string
          format: date
          example: "2025-01-15"
          description: "Start date of the assignment"
        endDate:
          type: string
          format: date
          nullable: true
          example: "2025-12-31"
          description: "End date of the assignment (null means indefinite)"
        user:
          $ref: "#/components/schemas/User"
        vehicle:
          $ref: "#/components/schemas/Vehicle"
      required:
        - id
        - startDate
        - user
        - vehicle

    AssignmentInput:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        vehicleId:
          type: string
          format: uuid
        startDate:
          type: string
          format: date
          description: "Start date of the assignment (defaults to today if not provided)"
        endDate:
          type: string
          format: date
          nullable: true
          description: "End date of the assignment (null means indefinite)"
      required:
        - userId
        - vehicleId

    AssignmentResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/Assignment"

    AssignmentListResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Assignment"

    # MAINTENANCE CATEGORY SCHEMAS
    MaintenanceCategory:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "950e8400-e29b-41d4-a716-446655440004"
        name:
          type: string
          example: "Motor"
      required:
        - id
        - name

    MaintenanceCategoryInput:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "Motor"
      required:
        - name

    MaintenanceCategoryResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/MaintenanceCategory"

    MaintenanceCategoryListResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/MaintenanceCategory"

    # MAINTENANCE SCHEMAS
    Maintenance:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "a50e8400-e29b-41d4-a716-446655440005"
        categoryId:
          type: string
          format: uuid
          example: "950e8400-e29b-41d4-a716-446655440004"
        name:
          type: string
          example: "Cambio de aceite"
        kilometersFrequency:
          type: integer
          minimum: 0
          nullable: true
          example: 10000
        daysFrequency:
          type: integer
          minimum: 0
          nullable: true
          example: 90
        observations:
          type: string
          nullable: true
          example: "Usar aceite sintético"
        instructions:
          type: string
          nullable: true
          example: "Cambiar filtro y revisar tapa"
        categoryName:
          type: string
          example: "Motor"
          description: "Category name (included in detailed views)"
      required:
        - id
        - categoryId
        - name

    MaintenanceInput:
      type: object
      properties:
        categoryId:
          type: string
          format: uuid
          example: "950e8400-e29b-41d4-a716-446655440004"
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "Cambio de aceite"
        kilometersFrequency:
          type: integer
          minimum: 0
          description: "Frequency in kilometers"
        daysFrequency:
          type: integer
          minimum: 0
          description: "Frequency in days"
        observations:
          type: string
          description: "Observation notes"
        instructions:
          type: string
          description: "Step-by-step instructions"
      required:
        - categoryId
        - name

    MaintenanceResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/Maintenance"

    MaintenanceListResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Maintenance"

    # ASSIGNED MAINTENANCE SCHEMAS
    AssignedMaintenance:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "b50e8400-e29b-41d4-a716-446655440006"
        vehicleId:
          type: string
          format: uuid
          example: "650e8400-e29b-41d4-a716-446655440001"
        maintenanceId:
          type: string
          format: uuid
          example: "a50e8400-e29b-41d4-a716-446655440005"
        kilometersFrequency:
          type: integer
          minimum: 0
          example: 10000
        daysFrequency:
          type: integer
          minimum: 0
          example: 90
        maintenance_name:
          type: string
          example: "Cambio de aceite"
        maintenance_category_name:
          type: string
          example: "Motor"
      required:
        - vehicleId
        - maintenanceId

    AssignedMaintenanceInput:
      type: object
      properties:
        vehicleId:
          type: string
          format: uuid
        maintenanceId:
          type: string
          format: uuid
        kilometersFrequency:
          type: integer
          minimum: 0
        daysFrequency:
          type: integer
          minimum: 0
      required:
        - vehicleId
        - maintenanceId

    AssignedMaintenanceResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/AssignedMaintenance"

    AssignedMaintenanceListResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/AssignedMaintenance"

    UpdateMaintenanceAssignmentInput:
      type: object
      properties:
        kilometersFrequency:
          type: integer
          minimum: 0
          description: "Frequency in kilometers for maintenance"
        daysFrequency:
          type: integer
          minimum: 0
          description: "Frequency in days for maintenance"
      minProperties: 1
      description: "At least one field must be provided for update"
      example:
        kilometersFrequency: 10000
        daysFrequency: 90

    MaintenanceAssignmentResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/AssignedMaintenance"

    # MAINTENANCE VEHICLE ASSIGNMENT SCHEMAS
    MaintenanceVehicleAssignment:
      type: object
      description: Vehicle assigned to a specific maintenance type with assignment details
      properties:
        id:
          type: string
          format: uuid
          description: Assignment ID
          example: "16529194-47f0-4254-b89d-264f602d14ba"
        vehicleId:
          type: string
          format: uuid
          description: Vehicle UUID
          example: "de5ec984-6ce0-4bbe-88a0-421b8f2e8b9c"
        maintenanceId:
          type: string
          format: uuid
          description: Maintenance type UUID
          example: "a06b00cc-13bf-4286-a517-59b8f3fadae2"
        kilometersFrequency:
          type: integer
          minimum: 0
          nullable: true
          description: Kilometers frequency for this maintenance (null if not applicable)
          example: 10000
        daysFrequency:
          type: integer
          minimum: 0
          nullable: true
          description: Days frequency for this maintenance (null if not applicable)
          example: 180
        licensePlate:
          type: string
          description: Vehicle license plate
          example: "ABC123"
        brand:
          type: string
          description: Vehicle brand
          example: "Toyota"
        model:
          type: string
          description: Vehicle model
          example: "Corolla"
        year:
          type: integer
          minimum: 1900
          maximum: 2100
          description: Vehicle year
          example: 2020
      required:
        - id
        - vehicleId
        - maintenanceId
        - licensePlate
        - brand
        - model
        - year

    MaintenanceVehiclesResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/MaintenanceVehicleAssignment"
              description: Array of vehicles assigned to the maintenance type
          example:
            status: "success"
            data:
              - id: "16529194-47f0-4254-b89d-264f602d14ba"
                vehicleId: "de5ec984-6ce0-4bbe-88a0-421b8f2e8b9c"
                maintenanceId: "a06b00cc-13bf-4286-a517-59b8f3fadae2"
                kilometersFrequency: 10000
                daysFrequency: 180
                licensePlate: "ABC123"
                brand: "Toyota"
                model: "Corolla"
                year: 2020
              - id: "5f879c10-d3b0-4dde-8c14-316f50c93b5b"
                vehicleId: "fe6ec984-6ce0-4bbe-88a0-421b8f2e8b9d"
                maintenanceId: "a06b00cc-13bf-4286-a517-59b8f3fadae2"
                kilometersFrequency: 10000
                daysFrequency: 180
                licensePlate: "DEF456"
                brand: "Honda"
                model: "Civic"
                year: 2019
            message: "Found 2 vehicle(s) assigned to maintenance"

    # MAINTENANCE RECORD SCHEMAS
    MaintenanceRecord:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "c50e8400-e29b-41d4-a716-446655440007"
        assignedMaintenanceId:
          type: string
          format: uuid
          example: "b50e8400-e29b-41d4-a716-446655440006"
        userId:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        date:
          type: string
          format: date-time
          example: "2025-01-10T14:30:00Z"
        kilometers:
          type: integer
          minimum: 0
          example: 75000
        notes:
          type: string
          example: "Mantenimiento realizado según especificaciones del fabricante"
      required:
        - assignedMaintenanceId
        - userId
        - date
        - kilometers

    MaintenanceRecordInput:
      type: object
      properties:
        assignedMaintenanceId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        date:
          type: string
          format: date-time
        kilometers:
          type: integer
          minimum: 0
        notes:
          type: string
      required:
        - assignedMaintenanceId
        - userId
        - date
        - kilometers

    MaintenanceRecordResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/MaintenanceRecord"

    MaintenanceRecordListResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/MaintenanceRecord"

  responses:
    # Common error responses using RFC 7807
    BadRequest:
      description: Bad Request - Invalid input data
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ValidationProblemDetails"

    NotFound:
      description: Resource not found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ProblemDetails"

    Conflict:
      description: Resource already exists
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ProblemDetails"

    InternalServerError:
      description: Internal server error
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ProblemDetails"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    SwaggerBypassHeader:
      name: x-swagger-bypass
      in: header
      required: false
      description: Dev-only header to bypass authentication in Swagger Try-It-Out when server is started with SWAGGER_BYPASS_AUTH=true.
      schema:
        type: string
        enum: ["true"]
        default: "true"

# Global security: require Bearer JWT for all endpoints unless a path/operation overrides with security: []
security:
  - BearerAuth: []
