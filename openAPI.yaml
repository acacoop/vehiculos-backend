openapi: 3.0.3
info:
  title: Vehicle Management API
  version: 2.0.0
  description: |
    Secure and scalable API f    put:
      summary: Update user
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuidg users, vehicles, assignments, and maintenance operations.
    
    ## Features
    - RESTful endpoints with consistent plural naming
    - Comprehensive error handling
    - Input validation and sanitization
    - Pagination support
    - Security headers and rate limiting
    
    ## Authentication
    Currently using basic security measures. OAuth2/JWT implementation pending.

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.vehiculos.example.com
    description: Production server

paths:
  # HEALTH CHECK
  /health:
    get:
      summary: Health check endpoint
      tags: [System]
      responses:
        "200":
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "API is healthy"
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: number

  # USERS
  /users:
    get:
      summary: Get all users with pagination
      tags: [Users]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
    post:
      summary: Create a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "409":
          $ref: '#/components/responses/Conflict'

  /users/{id}:
    get:
      summary: Get user by ID
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "404":
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update user (full replacement)
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateInput'
      responses:
        "200":
          description: User updated successfully
        "404":
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Partially update user
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateInput'
      responses:
        "200":
          description: User partially updated successfully
        "400":
          $ref: '#/components/responses/ValidationError'
        "404":
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete user
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: User deleted successfully
        "404":
          description: User not found

  /users/email/{email}:
    get:
      summary: Get user by email
      tags: [Users]
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
      responses:
        "200":
          description: User found
        "404":
          description: User not found

  /users/dni/{dni}:
    get:
      summary: Get user by DNI
      tags: [Users]
      parameters:
        - name: dni
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User found
        "404":
          description: User not found

  # VEHICLES
  /vehicles:
    get:
      summary: Get all vehicles with pagination
      tags: [Vehicles]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        "200":
          description: List of vehicles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleListResponse'
    post:
      summary: Create a new vehicle
      tags: [Vehicles]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleInput'
      responses:
        "201":
          description: Vehicle created successfully
        "400":
          $ref: '#/components/responses/BadRequest'
        "409":
          $ref: '#/components/responses/Conflict'

  /vehicles/{id}:
    get:
      summary: Get vehicle by ID
      tags: [Vehicles]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Vehicle found
        "404":
          description: Vehicle not found
    put:
      summary: Update vehicle (full replacement)
      tags: [Vehicles]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleInput'
      responses:
        "200":
          description: Vehicle updated successfully
        "404":
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Partially update vehicle
      tags: [Vehicles]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleInput'
      responses:
        "200":
          description: Vehicle partially updated successfully
        "400":
          $ref: '#/components/responses/ValidationError'
        "404":
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete vehicle
      tags: [Vehicles]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Vehicle deleted successfully
        "404":
          description: Vehicle not found

  /vehicles/license-plate/{licensePlate}:
    get:
      summary: Get vehicle by license plate
      tags: [Vehicles]
      parameters:
        - name: licensePlate
          in: path
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3}[0-9]{3}$'
      responses:
        "200":
          description: Vehicle found
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    # RFC 7807 Problem Details for HTTP APIs
    ProblemDetails:
      type: object
      description: RFC 7807 Problem Details for HTTP APIs
      properties:
        type:
          type: string
          format: uri
          description: A URI reference that identifies the problem type
          example: "https://example.com/problems/validation-error"
        title:
          type: string
          description: A short, human-readable summary of the problem type
          example: "Validation Failed"
        status:
          type: integer
          description: The HTTP status code
          example: 400
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence
          example: "The request contains invalid data"
        instance:
          type: string
          format: uri
          description: A URI reference that identifies the specific occurrence
          example: "/users/123"
      required:
        - type
        - title
        - status

    ValidationProblemDetails:
      allOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - type: object
          properties:
            errors:
              type: array
              description: List of validation errors
              items:
                type: object
                properties:
                  field:
                    type: string
                    description: The field that failed validation
                    example: "email"
                  message:
                    type: string
                    description: The validation error message
                    example: "Invalid email format"
                  code:
                    type: string
                    description: The validation error code
                    example: "invalid_string"

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        firstName:
          type: string
          example: "Juan"
        lastName:
          type: string
          example: "Pérez"
        dni:
          type: integer
          example: 12345678
        email:
          type: string
          format: email
          example: "juan.perez@example.com"
      required:
        - id
        - firstName
        - lastName
        - dni
        - email

    UserInput:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
        lastName:
          type: string
          minLength: 1
          maxLength: 50
        dni:
          type: integer
          minimum: 1000000
          maximum: 99999999
        email:
          type: string
          format: email
      required:
        - firstName
        - lastName
        - dni
        - email

    UserUpdateInput:
      allOf:
        - $ref: '#/components/schemas/UserInput'

    Vehicle:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "650e8400-e29b-41d4-a716-446655440001"
        licensePlate:
          type: string
          pattern: '^[A-Z]{3}[0-9]{3}$'
          example: "ABC123"
        brand:
          type: string
          example: "Toyota"
        model:
          type: string
          example: "Corolla"
        year:
          type: integer
          minimum: 1900
          maximum: 2030
          example: 2022
        imgUrl:
          type: string
          format: uri
          example: "https://example.com/vehicle.jpg"
      required:
        - id
        - licensePlate
        - brand
        - model
        - year
        - imgUrl

    VehicleInput:
      type: object
      properties:
        licensePlate:
          type: string
          pattern: '^[A-Z]{3}[0-9]{3}$'
        brand:
          type: string
          minLength: 1
          maxLength: 50
        model:
          type: string
          minLength: 1
          maxLength: 50
        year:
          type: integer
          minimum: 1900
          maximum: 2030
        imgUrl:
          type: string
          format: uri
      required:
        - licensePlate
        - brand
        - model
        - year
        - imgUrl

    # Response schemas
    ApiResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success, error]
        message:
          type: string
        data:
          type: object
        pagination:
          $ref: '#/components/schemas/Pagination'

    Pagination:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
        limit:
          type: integer
          minimum: 1
        total:
          type: integer
          minimum: 0
        pages:
          type: integer
          minimum: 0

    UserResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/User'

    UserListResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/User'

    VehicleResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Vehicle'

    VehicleListResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Vehicle'

    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            status:
              type: string
              enum: [error]
            errors:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                  message:
                    type: string

  responses:
    # Common error responses using RFC 7807
    BadRequest:
      description: Bad Request - Invalid input data
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ValidationProblemDetails'
    
    NotFound:
      description: Resource not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    
    Conflict:
      description: Resource already exists
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    
    InternalServerError:
      description: Internal server error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

# Global security (to be implemented)
# security:
#   - BearerAuth: []
