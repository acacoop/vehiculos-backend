openapi: 3.0.3
info:
  title: Vehicle Management API
  version: 2.0.0
  description: |
    Secure and scalable API for managing users, vehicles, assignments, and maintenance operations.

    ## Features
    - RESTful endpoints with consistent plural naming
    - Comprehensive error handling
    - Input validation and sanitization
    - Pagination support
    - Security headers and rate limiting

    ## Authentication
    Currently using basic security measures. OAuth2/JWT implementation pending.

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.vehiculos.example.com
    description: Production server

paths:
  # HEALTH CHECK
  /health:
    get:
      summary: Health check endpoint
      tags: [System]
      responses:
        "200":
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "API is healthy"
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: number

  # USERS
  /users:
    get:
      summary: Get all users with pagination and search
      description: |
        Get users with optional search filters and pagination.

        **Search Parameters:**
        - `email`: Exact match by email address
        - `dni`: Exact match by DNI
        - `first-name`: Partial match by first name (case-insensitive)
        - `last-name`: Partial match by last name (case-insensitive)
        - `active`: Filter by active status (true/false)

        **Examples:**
        - `/users?email=user@example.com`
        - `/users?dni=12345678`
        - `/users?first-name=John&last-name=Doe`
        - `/users?active=false`
        - `/users?first-name=Ana&page=1&limit=5`
      tags: [Users]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: email
          in: query
          description: Filter by exact email address
          schema:
            type: string
            format: email
        - name: dni
          in: query
          description: Filter by exact DNI
          schema:
            type: string
        - name: first-name
          in: query
          description: Filter by first name (partial match, case-insensitive)
          schema:
            type: string
        - name: last-name
          in: query
          description: Filter by last name (partial match, case-insensitive)
          schema:
            type: string
        - name: active
          in: query
          description: Filter by active status (true for active users, false for inactive users)
          schema:
            type: boolean
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListResponse"
    post:
      summary: Create a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"

  /users/{id}:
    get:
      summary: Get user by ID
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Update user (full replacement)
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateInput"
      responses:
        "200":
          description: User updated successfully
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Partially update user
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateInput"
      responses:
        "200":
          description: User partially updated successfully
        "400":
          $ref: "#/components/responses/ValidationError"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete user
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: User deleted successfully
        "404":
          description: User not found

  /users/{id}/activate:
    post:
      summary: Activate user
      description: Activate a deactivated user
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User activated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          description: User not found
        "409":
          description: User is already active
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"

  /users/{id}/deactivate:
    post:
      summary: Deactivate user
      description: Deactivate an active user (soft delete)
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User deactivated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          description: User not found
        "409":
          description: User is already inactive
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"

  # VEHICLES
  /vehicles:
    get:
      summary: Get all vehicles with pagination and search
      description: |
        Get vehicles with optional search filters and pagination.

        **Search Parameters:**
        - `license-plate`: Exact match by license plate
        - `brand`: Partial match by brand name (case-insensitive)
        - `model`: Partial match by model name (case-insensitive)
        - `year`: Exact match by year

        **Examples:**
        - `/vehicles?license-plate=AAA-123`
        - `/vehicles?brand=Toyota&model=Corolla`
        - `/vehicles?year=2020&page=1&limit=5`
        - `/vehicles?brand=Honda&year=2021`
      tags: [Vehicles]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: license-plate
          in: query
          description: Filter by exact license plate
          schema:
            type: string
            pattern: '^[A-Z]{2,3}-?\d{3,4}[A-Z]{0,2}$'
            example: "AAA-123"
        - name: brand
          in: query
          description: Filter by brand name (partial match, case-insensitive)
          schema:
            type: string
            example: "Toyota"
        - name: model
          in: query
          description: Filter by model name (partial match, case-insensitive)
          schema:
            type: string
            example: "Corolla"
        - name: year
          in: query
          description: Filter by exact year
          schema:
            type: integer
            minimum: 1900
            maximum: 2030
            example: 2020
      responses:
        "200":
          description: List of vehicles
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VehicleListResponse"
    post:
      summary: Create a new vehicle
      tags: [Vehicles]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VehicleInput"
      responses:
        "201":
          description: Vehicle created successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"

  /vehicles/{id}:
    get:
      summary: Get vehicle by ID
      tags: [Vehicles]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Vehicle found
        "404":
          description: Vehicle not found
    put:
      summary: Update vehicle (full replacement)
      tags: [Vehicles]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VehicleInput"
      responses:
        "200":
          description: Vehicle updated successfully
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Partially update vehicle
      tags: [Vehicles]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VehicleInput"
      responses:
        "200":
          description: Vehicle partially updated successfully
        "400":
          $ref: "#/components/responses/ValidationError"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete vehicle
      tags: [Vehicles]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Vehicle deleted successfully
        "404":
          description: Vehicle not found

  # RESERVATIONS
  /reservations:
    get:
      summary: Get all reservations with optional filters
      description: |
        Get all reservations with optional filtering by user or vehicle.

        **Filter Parameters:**
        - `userId`: Filter reservations by specific user ID
        - `vehicleId`: Filter reservations by specific vehicle ID
        - Pagination is supported with `page` and `limit` parameters

        **Examples:**
        - `/reservations?userId=550e8400-e29b-41d4-a716-446655440000`
        - `/reservations?vehicleId=650e8400-e29b-41d4-a716-446655440001`
        - `/reservations?page=1&limit=5`
      tags: [Reservations]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
          description: Filter reservations by user ID
        - name: vehicleId
          in: query
          schema:
            type: string
            format: uuid
          description: Filter reservations by vehicle ID
      responses:
        "200":
          description: List of reservations retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReservationListResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create a new reservation
      tags: [Reservations]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReservationInput"
      responses:
        "201":
          description: Reservation created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReservationResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # ASSIGNMENTS
  /assignments:
    get:
      summary: Get all vehicle assignments with optional filters
      description: |
        Get all vehicle assignments with optional filtering by user or vehicle.

        **Filter Parameters:**
        - `userId`: Filter assignments by specific user ID
        - `vehicleId`: Filter assignments by specific vehicle ID
        - Pagination is supported with `page` and `limit` parameters

        **Examples:**
        - `/assignments?userId=550e8400-e29b-41d4-a716-446655440000`
        - `/assignments?vehicleId=650e8400-e29b-41d4-a716-446655440001`
        - `/assignments?page=1&limit=5`
      tags: [Assignments]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
          description: Filter assignments by user ID
        - name: vehicleId
          in: query
          schema:
            type: string
            format: uuid
          description: Filter assignments by vehicle ID
      responses:
        "200":
          description: List of assignments retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssignmentListResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create a new vehicle assignment
      tags: [Assignments]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignmentInput"
      responses:
        "201":
          description: Assignment created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssignmentResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # MAINTENANCE CATEGORIES
  /maintenance/categories:
    get:
      summary: Get all maintenance categories
      tags: [Maintenance]
      responses:
        "200":
          description: List of maintenance categories retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceCategoryListResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # MAINTENANCE POSIBLES
  /maintenance/posibles:
    get:
      summary: Get all possible maintenance types
      tags: [Maintenance]
      responses:
        "200":
          description: List of possible maintenance types retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceListResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # MAINTENANCE ASSIGNMENTS
  /maintenance/assignments:
    post:
      summary: Assign maintenance to a vehicle
      tags: [Maintenance]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignedMaintenanceInput"
      responses:
        "201":
          description: Maintenance assigned successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssignedMaintenanceResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /maintenance/assignments/{vehicle_id}:
    get:
      summary: Get all maintenance assignments for a specific vehicle
      tags: [Maintenance]
      parameters:
        - name: vehicle_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Vehicle maintenance assignments retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssignedMaintenanceListResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # MAINTENANCE RECORDS
  /maintenance/records:
    get:
      summary: Get all maintenance records with optional filters
      description: |
        Get all maintenance records with optional filtering by user or vehicle.

        **Filter Parameters:**
        - `userId`: Filter maintenance records by specific user ID
        - `vehicleId`: Filter maintenance records by specific vehicle ID
        - Pagination is supported with `page` and `limit` parameters

        **Examples:**
        - `/maintenance/records?userId=550e8400-e29b-41d4-a716-446655440000`
        - `/maintenance/records?vehicleId=650e8400-e29b-41d4-a716-446655440001`
        - `/maintenance/records?page=1&limit=5`
      tags: [Maintenance]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
          description: Filter maintenance records by user ID
        - name: vehicleId
          in: query
          schema:
            type: string
            format: uuid
          description: Filter maintenance records by vehicle ID
      responses:
        "200":
          description: List of maintenance records retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceRecordListResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Add a new maintenance record
      tags: [Maintenance]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MaintenanceRecordInput"
      responses:
        "201":
          description: Maintenance record created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceRecordResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /maintenance/records/{id}:
    get:
      summary: Get maintenance record by ID
      tags: [Maintenance]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Maintenance record retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceRecordResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  schemas:
    # RFC 7807 Problem Details for HTTP APIs
    ProblemDetails:
      type: object
      description: RFC 7807 Problem Details for HTTP APIs
      properties:
        type:
          type: string
          format: uri
          description: A URI reference that identifies the problem type
          example: "https://example.com/problems/validation-error"
        title:
          type: string
          description: A short, human-readable summary of the problem type
          example: "Validation Failed"
        status:
          type: integer
          description: The HTTP status code
          example: 400
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence
          example: "The request contains invalid data"
        instance:
          type: string
          format: uri
          description: A URI reference that identifies the specific occurrence
          example: "/users/123"
      required:
        - type
        - title
        - status

    ValidationProblemDetails:
      allOf:
        - $ref: "#/components/schemas/ProblemDetails"
        - type: object
          properties:
            errors:
              type: array
              description: List of validation errors
              items:
                type: object
                properties:
                  field:
                    type: string
                    description: The field that failed validation
                    example: "email"
                  message:
                    type: string
                    description: The validation error message
                    example: "Invalid email format"
                  code:
                    type: string
                    description: The validation error code
                    example: "invalid_string"

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        firstName:
          type: string
          example: "Juan"
        lastName:
          type: string
          example: "Pérez"
        dni:
          type: integer
          example: 12345678
        email:
          type: string
          format: email
          example: "juan.perez@example.com"
        active:
          type: boolean
          example: true
          description: "Whether the user is active or deactivated"
      required:
        - id
        - firstName
        - lastName
        - dni
        - email
        - active

    UserInput:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
        lastName:
          type: string
          minLength: 1
          maxLength: 50
        dni:
          type: integer
          minimum: 1000000
          maximum: 99999999
        email:
          type: string
          format: email
        active:
          type: boolean
          default: true
          description: "Whether the user is active or deactivated"
      required:
        - firstName
        - lastName
        - dni
        - email

    UserUpdateInput:
      allOf:
        - $ref: "#/components/schemas/UserInput"

    Vehicle:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "650e8400-e29b-41d4-a716-446655440001"
        licensePlate:
          type: string
          pattern: "^[A-Z]{3}[0-9]{3}$"
          example: "ABC123"
        brand:
          type: string
          example: "Toyota"
        model:
          type: string
          example: "Corolla"
        year:
          type: integer
          minimum: 1900
          maximum: 2030
          example: 2022
        imgUrl:
          type: string
          format: uri
          example: "https://example.com/vehicle.jpg"
      required:
        - id
        - licensePlate
        - brand
        - model
        - year
        - imgUrl

    VehicleInput:
      type: object
      properties:
        licensePlate:
          type: string
          pattern: "^[A-Z]{3}[0-9]{3}$"
        brand:
          type: string
          minLength: 1
          maxLength: 50
        model:
          type: string
          minLength: 1
          maxLength: 50
        year:
          type: integer
          minimum: 1900
          maximum: 2030
        imgUrl:
          type: string
          format: uri
      required:
        - licensePlate
        - brand
        - model
        - year
        - imgUrl

    # Response schemas
    ApiResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success, error]
        message:
          type: string
        data:
          type: object
        pagination:
          $ref: "#/components/schemas/Pagination"

    Pagination:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
        limit:
          type: integer
          minimum: 1
        total:
          type: integer
          minimum: 0
        pages:
          type: integer
          minimum: 0

    UserResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/User"

    UserListResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/User"

    VehicleResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/Vehicle"

    VehicleListResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Vehicle"

    ErrorResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            status:
              type: string
              enum: [error]
            errors:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                  message:
                    type: string

    # RESERVATION SCHEMAS
    Reservation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "750e8400-e29b-41d4-a716-446655440002"
        vehicleId:
          type: string
          format: uuid
          example: "650e8400-e29b-41d4-a716-446655440001"
        userId:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        startDate:
          type: string
          format: date-time
          example: "2025-01-15T09:00:00Z"
        endDate:
          type: string
          format: date-time
          example: "2025-01-15T17:00:00Z"
      required:
        - id
        - vehicleId
        - userId
        - startDate
        - endDate

    ReservationInput:
      type: object
      properties:
        vehicleId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
      required:
        - vehicleId
        - userId
        - startDate
        - endDate

    ReservationResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/Reservation"

    ReservationListResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Reservation"

    # ASSIGNMENT SCHEMAS
    Assignment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "850e8400-e29b-41d4-a716-446655440003"
        startDate:
          type: string
          format: date
          example: "2025-01-15"
          description: "Start date of the assignment"
        endDate:
          type: string
          format: date
          nullable: true
          example: "2025-12-31"
          description: "End date of the assignment (null means indefinite)"
        user:
          $ref: "#/components/schemas/User"
        vehicle:
          $ref: "#/components/schemas/Vehicle"
      required:
        - id
        - startDate
        - user
        - vehicle

    AssignmentInput:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        vehicleId:
          type: string
          format: uuid
        startDate:
          type: string
          format: date
          description: "Start date of the assignment (defaults to today if not provided)"
        endDate:
          type: string
          format: date
          nullable: true
          description: "End date of the assignment (null means indefinite)"
      required:
        - userId
        - vehicleId

    AssignmentResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/Assignment"

    AssignmentListResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Assignment"

    # MAINTENANCE CATEGORY SCHEMAS
    MaintenanceCategory:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "950e8400-e29b-41d4-a716-446655440004"
        name:
          type: string
          example: "Motor"
      required:
        - id
        - name

    MaintenanceCategoryListResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/MaintenanceCategory"

    # MAINTENANCE SCHEMAS
    Maintenance:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "a50e8400-e29b-41d4-a716-446655440005"
        categoryId:
          type: string
          format: uuid
          example: "950e8400-e29b-41d4-a716-446655440004"
        name:
          type: string
          example: "Cambio de aceite"
      required:
        - id
        - categoryId
        - name

    MaintenanceListResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Maintenance"

    # ASSIGNED MAINTENANCE SCHEMAS
    AssignedMaintenance:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "b50e8400-e29b-41d4-a716-446655440006"
        vehicleId:
          type: string
          format: uuid
          example: "650e8400-e29b-41d4-a716-446655440001"
        maintenanceId:
          type: string
          format: uuid
          example: "a50e8400-e29b-41d4-a716-446655440005"
        kilometersFrequency:
          type: integer
          minimum: 0
          example: 10000
        daysFrequency:
          type: integer
          minimum: 0
          example: 90
        maintenance_name:
          type: string
          example: "Cambio de aceite"
        maintenance_category_name:
          type: string
          example: "Motor"
      required:
        - vehicleId
        - maintenanceId

    AssignedMaintenanceInput:
      type: object
      properties:
        vehicleId:
          type: string
          format: uuid
        maintenanceId:
          type: string
          format: uuid
        kilometersFrequency:
          type: integer
          minimum: 0
        daysFrequency:
          type: integer
          minimum: 0
      required:
        - vehicleId
        - maintenanceId

    AssignedMaintenanceResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/AssignedMaintenance"

    AssignedMaintenanceListResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/AssignedMaintenance"

    # MAINTENANCE RECORD SCHEMAS
    MaintenanceRecord:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "c50e8400-e29b-41d4-a716-446655440007"
        assignedMaintenanceId:
          type: string
          format: uuid
          example: "b50e8400-e29b-41d4-a716-446655440006"
        userId:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        date:
          type: string
          format: date-time
          example: "2025-01-10T14:30:00Z"
        kilometers:
          type: integer
          minimum: 0
          example: 75000
        notes:
          type: string
          example: "Mantenimiento realizado según especificaciones del fabricante"
      required:
        - assignedMaintenanceId
        - userId
        - date
        - kilometers

    MaintenanceRecordInput:
      type: object
      properties:
        assignedMaintenanceId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        date:
          type: string
          format: date-time
        kilometers:
          type: integer
          minimum: 0
        notes:
          type: string
      required:
        - assignedMaintenanceId
        - userId
        - date
        - kilometers

    MaintenanceRecordResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/MaintenanceRecord"

    MaintenanceRecordListResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/MaintenanceRecord"

  responses:
    # Common error responses using RFC 7807
    BadRequest:
      description: Bad Request - Invalid input data
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ValidationProblemDetails"

    NotFound:
      description: Resource not found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ProblemDetails"

    Conflict:
      description: Resource already exists
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ProblemDetails"

    InternalServerError:
      description: Internal server error
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ProblemDetails"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
# Global security (to be implemented)
# security:
#   - BearerAuth: []
